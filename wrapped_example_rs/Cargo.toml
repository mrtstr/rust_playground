[package]
name = "wrapped_example_core"
version = "0.1.0"
edition = "2021"
description = "A sample Rust project"
license = "MIT"


[lib]
name = "wrapped_example_core"                  # <-- must match #[pymodule] fn wrapped_example_core(...)
crate-type = ["cdylib"]          # <-- important

[dependencies]
tokio = { version = "1", features = ["full"] }
# An asynchronous runtime for Rust (async/await support).
chrono = "*"
clap = { version = "4.5", features = ["derive"] }

anyhow = { version = "1", features = ["backtrace"] }
# color-eyre = "0.6"
rayon = "*"
# --- dataframes ---
arrow = "*"
# Match pyo3-polars' pyo3 (0.25 as of 0.24.0)
pyo3 = { version = "0.25", features = ["extension-module", "eyre"] }
eyre = "0.6"
# pyo3-polars 0.24.0 (enable lazy if you need it)
pyo3-polars = { version = "0.24.0", features = ["lazy"] }

# Add a direct Polars dep to *unify features* and turn on diagonal_concat
polars = { version = "0.51", default-features = false, features = [
  "lazy",
  "parquet",
  "fmt",
  "diagonal_concat",
  "dtype-array"      # <-- IMPORTANT
] }
# --- IO helpers ---
csv = "1"                                                        # data IO
serde = { version = "1", features = ["derive"] }
# for serializing and deserializing JSON, YAML, TOML
parquet = "*"
datafusion = "*"

# Nice builder ergonomics; async readers/writers
opendal = "*"

# --- NumPy-like arrays ---
ndarray = { version = "0.16.0", features = ["approx", "rayon"] }   # n-d arrays + parallel iter (via rayon)
ndarray-linalg = "0.17.0"                                          # BLAS/LAPACK-based linalg (SVD, eig, etc.)


[dev-dependencies]
criterion = "0.7.0"

[features]
default = ["cli"]
cli = []